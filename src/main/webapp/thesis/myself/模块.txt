摘要：
摘要
	动态表单的需求随着系统规模的扩大而变得越来越重要，它能根据指定需求设计出指定的统计表单，从而完成数据分析。现在较为流行的技术有JQuery动态创建，.NET框架，XML技术动态创建等等。但是基于JAVA WEB来实现的该功能系统还是很少的。
	本论文主要研究如何利用JAVA WEB的B/S平台，实现动态表单的创建。前端技术采用EasyUI，后端采用SpringMVC+Spring+MyBatis框架，数据持久层采用MySQL关系型数据库共同完成该系统。动态表单设计，首先是数据库的设计，让关系型数据库能够很好的处理表和表中字段的存储关系，除此之外，同时还要兼备将这些字段组合起来在html页面中展示出来的功能。由于字段是动态生成的，还要考虑到对每一个字段的内容校验功能，防止用户进行SQL注入攻击等，最后则是将用户的填写的内容和对应的表的表字段一一对应，存入数据库保存。
	考虑到同一张表可能一个用户多次填写，本系统还增加了字段查询功能，提示用户填写历史，以便复用，从而减轻的填写负担。该功能就是要根据当前用户和当前的填写的表以及当前的填写的字段进行组合查询数据库，拿出历史信息，展示用户。

关键词: EasyUI；Java；Spring；动态表单；字段检验

英文摘要:
xxx

1.1	研究目的和意义	1
目的：
	表单是一种重要的数据采集方式。由于当今系统的种类繁多，对应的表单数据种类
	也是不统一。这样就没有一致的管理。其次是普通的表单都是事先设置好的，开发人员
	根据具体的需求来设计的，这样就不能做到表单根据需求的变化而变化，使用起来非常
	不方便。如果一张表单上的数据填写信息非常多，而用户某天的需求只是需要当中的某
	部分，而不是所有信息都要填写，这样即加大了管理和维护，同时也增加了用户的填写
	所浪费的时间。相反，如果事先定义好的表单里面的字段有限，而后期的需求是希望能
	够在里面添加一些新的字段，那么这样的需求就无法实现，只能重新定义一张表单，即
	增大了系统二次开发频率，同时也减低了系统的通用性，工作起来效率很低。
	    因此，需要设计一个具有能够根据需求变化而变化的动态表单功能，并且高性能高
	效率的处理用户信息系统，加快各个系统的开发速度,提高系统的通用性和需求变化性，
	满足用户日益增长的需求。
意义：
	在知晓了普通的表单的局限性了以后就不难料到，在以后针对需求变化较大的系统
	内部使用的表单是动态生成的可能性迟早会成为开发人员的设计目标。只有这样的系统
	才能满足客户的需求。
	    毫不夸张的说，通用表单理论上可以实现所有系统的表单数据采集功能，因为所有
	的字段都是根据用户的需求添加进入的。生成的表单自然也都是具有针对性的。同时具
	有智能提示帮助用户填写功能。

1.2	国内外发展现状
	现在很多的大型系统都意识到表单需求变化越来越成为趋势。大部分系统都做了
	相应的处理。国内外都出现很多处理这种需求变化的表单系统，但它们和本系统
	相比较都有各自的局限性：
	1.数飞表单引擎系统
	         该系统是由深圳市数飞尔科技有限公司所生产的系统。JAVA表单引擎系统
	     核心功能为表单自定义，辅助功能包含流程自定义、即时消息、公告管理、
	     归档文件、修改密码、签章管理、工作代理、系统设置等。实现不编码就能完成
	     软件系统的开发。操作人员不需要懂得软件编码，只需要花几分钟时间，就能成为
	     专业软件制作者。
	     特点：
	         自动完成数据添加、修改、删除、查询等功能，同时能完成自动完成流
	     程审批、权限控制、打印功能、附件上传、数据检索、weboffice在线编辑、
	     数据统计等软件功能。
	     与本系统比较：
	         本系统提供了表单校验功能，并且能够根据用户对所有字段的顺序进行排序。
	
	2.基于XML的动态表单快速生成技术
	         可扩展标记语言，标准通用标记语言的子集，是一种用于标记电子文件使其
	     具有结构性的标记语言。
	     特点：
	          众所周知，XML的结构灵活性十分乐观，尤其是针对复杂的字段对象，
	      它的属性可以通过非常灵活的子标签来表示，同时它还可以充当数据库的功能，
	      这就符合了保存的定义和保存动态标签的需求，如果要显示的时候可以利用DOM4J
	      等技术对其进行解析，然后就可以获取出所有的字段，从而显示在html页面上。
	      与本系统比较：
	          本系统将所有字段全部设置成一个JavaBean模型，交由MySql数据库来管理。
	      这样的优点是：便于增、删、查、改四个基本操作，同时效率要要比解析XML文件
	      快很多。试想一下：每次修改一个字段，就要将整个XML文件加载到内存中，效率
	      十分低效，同时不便于维护所有的字段。
	
	3.基于C#语言中的.NET框架组件生成技术
	      C#控件的出现，让界面UI的操作的重用得到很大的提高，对开发效率的提高很
	  有积极的意义，我们可以使用.net的自定义控件，来开发属于自己的控件。甚至可
	  以加入VS的工具箱，像使用自带控件一样，随心所欲的拖动得到自己的要求。
	  特点：
	    操作起来灵活，高效，大大减轻了开发人员的开发负担。同时具有完善的字段验
	  证功能。
	  与本系统相比：
	      本系统首先是采用JAVA与开发，虽说都是面向对象语言，但是JAVA在WEB端
	  的开发优势还是毋庸置疑的，完善的框架和灵活的需求变更使得开发人员更能设计
	  出需求变化的系统。同时，C#的产品一般都是成套安装，不管是客户端还是WEB端
	  或者是数据库，都基本是一体化的产品，这就减弱了系统组件的兼容性和维护性，
	  而在这方面JAVA具有绝对的优势。对外提供的组件框架具有很高的内聚性，相互之
	  间的耦合度很低，维护和开发起来事半功倍。

1.3  可行性分析
需求分析：
	工能需求：创建表单，并保存至数据库；修改表单，保存至数据库；用户信息管理；用户登录；权限控制；用户查看表单功能
		用户填写表单；表单数据回显；用户修改表单
	系能指标：要求采用动态生成的技术创建表单，类型丰富；对特殊字段提供校验功能；系统能够只能提示用户查看历史填写记录，以便帮助用户智能填写；
	可靠性需求：系统安全级别可防止用户恶意登陆，数据库SQL攻击，多表单大数据量系统可靠性；
	可扩展需求：未来可以将系统完善至非关系型数据表单；大数据量表单系统稳定性；更为完善的数据库分析；
技术分析：
	整个系统采用技术全栈：html+EasyUI+SpringMVC+Spring+Mybatis+Mysql
	技术都是采用当今主流框架，成熟、稳定、可靠性高；
环境分析：
	系统可在windows、linux、unix系统进行部署;服务器采用Tomcat7+版本，数据库5.0+版本
	Java Version 1.7+版本，
工具分析：
	Eclipse IDE for Java Developers、JDK、Mysql、SQLYog、Git/GitHub

1.4论文主要研究内容
	1.采用何框架来开发需求变化较大的系统
	2.通用表单的通用性如何通过程序来实现
	3.表单中的字段校验方式如何实现
	4.表单和内部的字段在数据库中如何实现
	5.如何解决表单内部字段和用户填写后的字段的区分和存储问题
	6.如果显示用户动态填写的信息
	7.如何实现不同表单不同的查询条件
	8.如何智能查询出用户填写过的历史记录


2 相关技术及背景知识介绍13-27
	2.1项目各模块技术的选择
		1前端技术选择：考虑到系统的可扩展性和移植型，前端完全采用html作为视图展现，而没有采用何java结合紧密的JSP，
			原因是jsp属于后端动态资源，依赖后端管理，耦合性没有html低，同时它依赖较多，jsp-api、jstl标签等等。
			数据封装依赖模型和请求request域，完全没有html简洁，交互数据全部是Json，前后端交互全是接口API实现，耦合性滴，
			当今较为主流的前端框架AngulaerJS也是采用这用思想。
			前端框架采用JQuery，UI采用EasyUI，开源，功能丰富，集成式前端页面，也避开了多页面的展示URL的管理。
		2后端技术选择：采用可谓当今最为流行的java框架Spring4+，其一站式管理了控制层，业务层。同时对外提供可扩展接口，
			是的开发人员可以选择具体的框架技术，而管理的事情可以交给spring处理。
			而逻辑控制交给springmvc，由于springmvc本就是spring项目，所以衔接的非常紧密，故而没有选择Strust2等框架来
			实现控制层。
		3持久层技术选择：当前较为流行的主要是Hibernate和Mybatis两个框架，本系统选择后者，由于对应变更需求较大的系统，查询的变动
			概率也随之变大，所以采用Mybatis，其对SQL语句的管理交给XML配置文件来完成，使得变化性需求可以很方便的更改自己的SQL语句。
		4数据库选择：由于系统数据关系是呈现的是关系型数据，所以选择Mysql，如果说和java结合的数据库流行程度最多的，那非Mysql莫属不可，
			考虑到没有采用C#语言，所以没有使用SQLServer而Oracle数据库是收费系统，故而放弃。
	2.2 MVC模型
			本系统的设计完全采用MVC标准，MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，
			一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，
			在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、
			处理和输出功能在一个逻辑的图形化用户界面的结构中。
			Model 是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据。
			View 是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的。
			Controller 是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。
			而针对本系统，Model采用标准JavaBean规范设计，使得其能够和前端Json数据格式以及和数据库表列明对应，完成ORM映射。
			而MVC最典型的是JSP + servlet + javabean的模式，而本系统则是HTML + Servlet + JavaBean的模式
	2.3 B/S模式
		本系统采用B/S模式开发，即浏览器/服务器模式，由于考虑系统的用户，采用浏览器进行设计和管理是最适应的，它不需要用户下载特定的安装软件，
		真正意义上的非侵入式系统，只需要浏览器就可以操作。B/S结构的使用越来越多，特别是由需求推动了AJAX技术的发展，它的程序也能在客户端电脑上进行部分处理，
		从而大大的减轻了服务器的负担；并增加了交互性，能进行局部实时刷新。
		C/S:即客户端/服务器模式，将任务合理分配到Client端和Server端来实现，
			Client/Server结构是20世纪80年代末提出的。这种结构的系统把较复杂的计算和管理任务交给网络上的高档机器——服务器，
			而把一些频繁与用户打交道的任务交给前端较简单的计算机—客户机。通过这种方式，将任务合理分配到客户端和服务器端，既充分利用了两端硬件环境的优势，
			又实现了网络上信息资源的共享。
		选择B/S的原因,与C/S对比：
			1．硬件环境：
				C/S 一般建立在专用的网络上，小范围里的网络环境，局域网之间再通过专门服务器提供连接和数据交换服务。
				B/S 建立在广域网之上的，不必是专门的网络硬件环境，有比C/S更强的适应范围，一般只要有操作系统和浏览器就行。
			2．对程序架构：
				C/S 程序可以更加注重流程， 可以对权限多层次校验， 对系统运行速度可以较少考虑。
				B/S 对安全以及访问速度的多重的考虑，建立在需要更加优化的基础之上. 比C/S有更高的要求 B/S结构的程序架构是发展的趋势，
					从MS的.Net系列的BizTalk 2000 Exchange 2000等，全面支持网络的构件搭建的系统。SUN 和IBM推JavaBean 构件技术等，
					使 B/S更加成熟.。
			3．系统维护	
				C/S 程序由于整体性，必须整体考察，处理出现的问题以及系统升级、升级难、 可能是再做一个全新的系统。
				B/S 构件组成，方便构件个别的更换，实现系统的无缝升级. 系统维护开销减到最小.用户从网上自己下载安装就可以实现升级。
			4．用户接口不同
				C/S 多是建立的Window平台上，表现方法有限，对程序员普遍要求较高。
				B/S 建立在浏览器上， 有更加丰富和生动的表现方式与用户交流. 并且大部分难度减低，减低开发成本。
				
	2.4 前端基于EasyUI框架
		jQuery EasyUI是一组基于jQuery的UI插件集合体，而jQuery EasyUI的目标就是帮助web开发者更轻松的打造出功能丰富并且美观的UI界面。
		开发者不需要编写复杂的javascript，也不需要对css样式有深入的了解，开发者需要了解的只有一些简单的html标签。这将大大减少前端开发时间和
		较低开发难度。是本系统的选择的主要原因。
		jQuery EasyUI有以下特点：
			1、基于jquery用户界面插件的集合
			2、为一些当前用于交互的js应用提供必要的功能
			3、EasyUI支持两种渲染方式分别为javascript方式（如：$('#p').panel({...})）和html标记方式（如：class="easyui-panel"）
			4、支持HTML5（通过data-options属性）
			5、开发产品时可节省时间和资源
			6、简单，但很强大
			7、支持扩展，可根据自己的需求扩展控件
			8、目前各项不足正以版本递增的方式不断完善
		
	2.5 后端基于SSI框架
		本系统采用的SSI框架是SpringMVC,Spring，Mybatis。较早的框架是指Struts2，Spring以及Ibatis组成,之所以没有选择后者，
		原因是前者使用起来更加灵活，而且安全性比较好，我们都知道Struts2出现过两次大漏洞。
		2.5.1 springmvc
			Spring MVC属于SpringFrameWork的后续开发出来的，专门用来代替Struts产品，而且相当成功。
			Spring MVC分离了控制器、模型对象、过滤器以及处理程序对象的角色，这种分离让它们更容易进行定制。
			同时它的优点不能忽视：
				它是一个典型的教科书式的mvc构架，而不像struts等都是变种或者不是完全基于mvc系统的框架，
				第二它是一个纯正的servlet系统。由于是开源项目，框架本身有代码，看起来容易理解。尤其是JDK5加入了注解功能，SpringMVC的注解
				配置更加灵活，让程序模块间的的耦合度大大较低，比如减少了对配置文件的依赖，尤其是spring推出的最新框架SpringBoot，完全抛弃了
				依赖配置，成了真正意义上的零配置应用程序。
				SpringMVC和Struts2对比：
				1 请求类的定义：Struts2是类级别的拦截， 一个类对应一个request请求，SpringMVC是方法级别的拦截，一个方法对应一个
					request请求，显得更加灵活，同时更加便于管理。
				2 url的定义：SpringMVC一个方法就可以对应一个url,同时容易实现restful url,而struts2的架构实现起来要费劲，
					因为Struts2中Action的一个方法可以对应一个url，而其类属性却被所有方法共享，这也就无法用注解或其他方式标识其所属方法了。
				3 配置文件：SpringMVC可以认为已经100%零配置，而Struts2的配置文件很多，比如它的Interceptor拦截机制
				4 安全级别：SpringMVC和Spring是无缝的，在结合Spring的上安全比Struts2高，Struts2出现过大漏洞，而SpringMVC没有。
				5 复杂度：SpringMVC比Struts2轻量很多，这就降低了开发人员的学习成本。
			基于这些原因，本系统采用SpringMVC,而放弃更为年老的Struts2.
		2.5.1 spirng
		2.5.1 mybatis

























